Transform: AWS::Serverless-2016-10-31
Description: AWS Resources for the Minecraft server

Mappings:
  # EC2:
  #   Instance:
  #     Name: Minecraft Server (cloudformation)
  #     Type: t2.medium
  #   SecurityGroup:
  #     Name: Minecraft Server SG (cloudformation)
  #   KeyPair:
  #     Name: Minecraft-Keys-cloudformation

  Route53:
    HostedZone:
      DefaultZone: Z0922428ZJ5CNMUTNWOR


Parameters:
  Owner:
    Type: String
    Default: jack

  Project:
    Type: String
    Default: Minecraft

  AppName:
    Type: String
    Default: Minecraft
  
  DomainName:
    Type: String
    Default: curranserver.click
    AllowedPattern: ^(NA)$|^(\w+\.\w+)$
    Description: The domain name imported by the user

  # CustomSubdomain:
  #   Type: String
  #   Default: cloud
  #   AllowedPattern: ^()$|^((\w+\.)*\w+)$
  #   Description: A subdomain to be added to the TLD

  # AvailabilityZone:
  #   Type: String
  #   Default: us-east-1a
  #   AllowedPattern: ^[a-z]+-[a-z]+-[a-z0-9]+$
  #   Description: The availability zone for hosting the server

  # ServerInstanceType:
  #   Type: String
  #   Default: t2.medium
  #   AllowedPattern: ^\w+\.\w+$
  #   Description: The EC2 instance type for hosting the server


# Conditions:
#   HasCustomDomain: !Not [!Equals [!Ref DomainName, curranserver.click]]


Resources:
  # IAM
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonRoute53FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      RoleName: !Sub Lambda-${AppName}
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  # ServerHostIAMRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ec2.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/IAMReadOnlyAccess
  #       - arn:aws:iam::aws:policy/AmazonS3FullAccess
  #     RoleName: EC2Role-minecraft-cloudformation
  #     Tags:
  #       - Key: created_by
  #         Value: jack_curran

  # ServerHostInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   DependsOn: ServerHostIAMRole
  #   Properties:
  #     InstanceProfileName: EC2Role-minecraft-cloudformation
  #     Roles:
  #       - !Ref ServerHostIAMRole

  # EC2
  # ServerHostEBSVolume:
  #   Type: AWS::EC2::Volume
  #   Properties:
  #     AvailabilityZone: !Ref AvailabilityZone
  #     Iops: 3000
  #     Size: 16
  #     Tags:
  #       - Key: created_by
  #         Value: jack_curran
  #     Throughput: 125
  #     VolumeType: gp3

  # ServerHostSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: This security group allows access to the server only through the Minecraft portal.
  #     GroupName: !FindInMap [EC2, SecurityGroup, Name]
  #     SecurityGroupEgress:
  #       - CidrIp: 0.0.0.0/0
  #         Description: Allows access everywhere with no limitations
  #         FromPort: -1
  #         ToPort: -1
  #         IpProtocol: all
  #     SecurityGroupIngress:
  #       - CidrIp: 0.0.0.0/0
  #         Description: Allows SSH access
  #         FromPort: 22
  #         ToPort: 22
  #         IpProtocol: tcp
  #       - CidrIp: 0.0.0.0/0
  #         Description: Allows access from the Minecraft launcher
  #         FromPort: 25565
  #         ToPort: 25565
  #         IpProtocol: tcp
  #     Tags:
  #       - Key: Name
  #         Value: !FindInMap [EC2, SecurityGroup, Name]
  #       - Key: created_by
  #         Value: jack_curran
  #     VpcId: vpc-04235c526004ddbb5

  # ServerHostKeyPair:
  #   Type: AWS::EC2::KeyPair
  #   Properties:
  #     KeyName: !FindInMap [EC2, KeyPair, Name]
  #     Tags:
  #       - Key: Name
  #         Value: !FindInMap [EC2, KeyPair, Name]
  #       - Key: created_by
  #         Value: jack_curran

  # ServerHostInstance:
  #   Type: AWS::EC2::Instance
  #   DependsOn: 
  #     - ServerHostInstanceProfile
  #     - ServerHostEBSVolume
  #     - ServerHostSecurityGroup
  #     - ServerHostKeyPair
  #   Properties:
  #     AvailabilityZone: !Ref AvailabilityZone
  #     IamInstanceProfile: !Ref ServerHostInstanceProfile
  #     ImageId: ami-0889a44b331db0194
  #     InstanceType: !Ref ServerInstanceType
  #     KeyName: !FindInMap [EC2, KeyPair, Name]
  #     PropagateTagsToVolumeOnCreation: true
  #     SecurityGroupIds:
  #       - !GetAtt ServerHostSecurityGroup.GroupId
  #     Tags:
  #       - Key: Name
  #         Value: !FindInMap [EC2, Instance, Name]
  #       - Key: created_by
  #         Value: jack_curran
  #     UserData: !Base64 |
  #       #!/bin/bash
        
  #       set +e

  #       sudo yum update -y
  #       sudo yum install -y java-17-amazon-corretto-devel.x86_64
  #       sudo mkdir /opt/minecraft
  #       sudo mkdir /opt/minecraft/server
  #       cd /opt/minecraft/server
  #       sudo aws s3 cp s3://minecraft-resources-curran/server.jar server.jar
  #       sudo java -Xmx1024M -Xms1024M -jar server.jar nogui
  #       sudo aws s3 cp s3://minecraft-resources-curran/eula.txt eula.txt

  #       cd ~
  #       sudo aws s3 cp s3://minecraft-resources-curran/rc.local /etc/rc.local
  #       sudo aws s3 cp s3://minecraft-resources-curran/rc.local /etc/rc.d/rc.local
  #       sudo chmod u+x /etc/rc.local
  #       sudo chmod u+x /etc/rc.d/rc.local
  #       sudo aws s3 cp s3://minecraft-resources-curran/rc-local.service /etc/systemd/system/rc-local.service
        
  #       sudo systemctl start rc-local
  #       sudo systemctl enable rc-local

  #     Volumes:
  #       - Device: /dev/sdh
  #         VolumeId: !GetAtt ServerHostEBSVolume.VolumeId

  # Lambda
  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleArchitectures:
        - arm64
        - x86_64
      CompatibleRuntimes:
        - python3.12
      ContentUri: ./layer
      LayerName: !Sub ${AppName}-dependencies
      RetentionPolicy: Delete

  MinecraftLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      CodeUri: ./main
      Description: Manages the Minecraft server
      Environment:
        Variables:
          INSTANCE_ID: i-0f46f418e6cd5bd50
          DOMAIN: !Ref DomainName
          PERIOD: 4
          DNS_FUNCTION: !Ref DNSLambda
          SNS_TOPIC: arn:aws:sns:us-east-1:298451523862:Minecraft-Server-SNS
          POWERTOOLS_SERVICE_NAME: !Ref AppName
          POWERTOOLS_LOG_LEVEL: INFO
      FunctionName: !Ref AppName
      Handler: app.handler
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref MinecraftAPI
            Method: ANY
            Path: /{path+}
            PayloadFormatVersion: "2.0"
      Layers:
        - !Ref DependencyLayer
      MemorySize: 128
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Tags:
        Owner: !Ref Owner
        Project: !Ref Project

  DNSLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      CodeUri: ./dns
      Description: Updates the Route53 record when server starts
      Environment:
        Variables:
          INSTANCE_ID: i-0f46f418e6cd5bd50
          DOMAIN: !Ref DomainName
          HOSTED_ZONE_ID: !FindInMap [Route53, HostedZone, DefaultZone]
          POWERTOOLS_SERVICE_NAME: !Sub ${AppName}-DNS-Manager
          POWERTOOLS_LOG_LEVEL: INFO
      FunctionName: !Sub ${AppName}-DNS-Manager
      Handler: app.handler
      Layers:
        - !Ref DependencyLayer
      MemorySize: 128
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Tags:
        Owner: !Ref Owner
        Project: !Ref Project

  # API Gateway
  MinecraftAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: Triggers the Lambda that manages the Minecraft server
      Name: !Sub ${AppName}-API
      ProtocolType: HTTP
      Tags:
        Owner: !Ref Owner
        Project: !Ref Project

  MinecraftAPIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref MinecraftAPI
      AutoDeploy: true
      StageName: $default
      Tags:
        Owner: !Ref Owner
        Project: !Ref Project

  MinecraftAPIIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MinecraftAPI
      Description: Integrating the Minecraft API with the managing lambda
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ""
        - - "arn:"
          - !Ref AWS::Partition
          - ":apigateway:"
          - !Ref AWS::Region
          - ":lambda:path/2015-03-31/functions/"
          - !GetAtt MinecraftLambda.Arn
          - /invocations
      PayloadFormatVersion: "2.0"

  MinecraftAPIRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MinecraftAPI
      AuthorizationType: NONE
      RouteKey: ANY /{path+}
      Target: !Join
        - /
        - - integrations
          - !Ref MinecraftAPIIntegration

  # APIDomainName:
  #   Type: AWS::ApiGatewayV2::DomainName
  #   DependsOn: 
  #     - APIHTTPSCertificate
  #     - APILambdaTrigger
  #   Properties:
  #     DomainName: !Join
  #       - "."
  #       - - api
  #         - !Ref CustomSubdomain
  #         - !Ref DomainName
  #     DomainNameConfigurations:
  #       - CertificateArn: !Ref APIHTTPSCertificate
  #         CertificateName: APICertificate

  # APIDomainNameMapping:
  #   Type: AWS::ApiGatewayV2::ApiMapping
  #   DependsOn: 
  #     - APIDomainName
  #     - APILambdaTriggerStage
  #   Properties:
  #     ApiId: !Ref APILambdaTrigger
  #     DomainName: !Ref APIDomainName
  #     Stage: !Ref APILambdaTriggerStage


  # Route 53
  # ServerHostedZone:
  #   Type: AWS::Route53::HostedZone
  #   Condition: HasCustomDomain
  #   Properties:
  #     Name: !Ref DomainName
  #     HostedZoneTags:
  #       - Key: created_by
  #         Value: jack_curran

  # ServerRouteRecord:
  #   Type: AWS::Route53::RecordSet
  #   DependsOn: ServerHostInstance
  #   Properties:
  #     HostedZoneId: !If
  #       - HasCustomDomain
  #       - !Ref ServerHostedZone
  #       - !FindInMap [Route53, HostedZone, DefaultZone]
  #     Name: !Join
  #       - "."
  #       - - !Ref CustomSubdomain
  #         - !Ref DomainName
  #     ResourceRecords:
  #       - !GetAtt ServerHostInstance.PublicIp
  #     Type: A
  #     TTL: 300

  # APIRouteRecord:
  #   Type: AWS::Route53::RecordSet
  #   DependsOn: APIDomainName
  #   Properties:
  #     AliasTarget:
  #       DNSName: !GetAtt APIDomainName.RegionalDomainName
  #       HostedZoneId: !GetAtt APIDomainName.RegionalHostedZoneId
  #     HostedZoneId: !If
  #       - HasCustomDomain
  #       - !Ref ServerHostedZone
  #       - !FindInMap [Route53, HostedZone, DefaultZone]
  #     Name: !Join
  #       - "."
  #       - - api
  #         - !Ref CustomSubdomain
  #         - !Ref DomainName
  #     Type: A


  # # ACM
  # APIHTTPSCertificate:
    # Type: AWS::CertificateManager::Certificate
    # Properties:
    #   DomainName: !Join
    #     - "."
    #     - - api
    #       - !Ref CustomSubdomain
    #       - !Ref DomainName
    #   DomainValidationOptions:
    #     - DomainName: !Join
    #         - "."
    #         - - api
    #           - !Ref CustomSubdomain
    #           - !Ref DomainName
    #       HostedZoneId: !If
    #         - HasCustomDomain
    #         - !Ref ServerHostedZone
    #         - !FindInMap [Route53, HostedZone, DefaultZone]
    #   Tags:
    #     - Key: created_by
    #       Value: jack_curran
    #   ValidationMethod: DNS