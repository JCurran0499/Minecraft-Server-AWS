Transform: AWS::Serverless-2016-10-31
Description: AWS Resources for the Minecraft server

Mappings:
  Global:
    EC2:
      AvailabilityZone: us-east-1a
      InstanceType: t2.medium

    Lambda:
      Runtime: python3.12
      Architecture: arm64
      LogLevel: INFO


Parameters:
  Owner:
    Type: String
    Default: jack

  Project:
    Type: String
    Default: Minecraft

  AppName:
    Type: String
    Default: Minecraft

  HostedZone:
    Type: String
    Default: Z0922428ZJ5CNMUTNWOR
  
  DomainName:
    Type: String
    Default: curranserver.click
    AllowedPattern: ^(NA)$|^(\w+\.\w+)$
    Description: The domain name imported by the user

  ContactEmail:
    Type: String
    Default: jackcurran49@gmail.com


Resources:
  # IAM
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonRoute53FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      RoleName: !Sub Lambda-${AppName}
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  SchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      RoleName: !Sub EventBridge-${AppName}
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  ServerHostIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: !Sub EC2Role-${AppName}
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  ServerHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub EC2Role-${AppName}
      Roles:
        - !Ref ServerHostIAMRole

  ServerHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows access to the server only through the Minecraft portal.
      GroupName: !Sub ${AppName} SG
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allows access everywhere with no limitations
          FromPort: -1
          ToPort: -1
          IpProtocol: all
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allows SSH access
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: Allows access from the Minecraft launcher
          FromPort: 25565
          ToPort: 25565
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${AppName} SG
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
      VpcId: vpc-04235c526004ddbb5

  ServerHostInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !FindInMap [Global, EC2, AvailabilityZone]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Iops: 4000
            VolumeSize: 16
            VolumeType: gp3
      IamInstanceProfile: !Ref ServerHostInstanceProfile
      ImageId: ami-08a0d1e16fc3f61ea
      InstanceType: !FindInMap [Global, EC2, InstanceType]
      SecurityGroupIds:
        - !GetAtt ServerHostSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-Server
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
      UserData: !Base64 |
        #!/bin/bash
        
        set +e

        cd ~
        sudo aws s3 sync s3://minecraft-world-curran/scripts .

        sudo yum update -y
        sudo yum install java-21-amazon-corretto-headless -y
        sudo mkdir /opt/minecraft
        sudo mkdir /opt/minecraft/server
        cd /opt/minecraft/server
        sudo aws s3 cp s3://minecraft-world-curran/server.jar server.jar
        sudo java -Xmx1024M -Xms1024M -jar server.jar nogui
        sudo aws s3 cp s3://minecraft-world-curran/eula.txt eula.txt
        
        sudo touch /var/log/server.log
        sudo touch /var/log/server-err.log
        sudo java -Xmx1024M -Xms1024M -jar server.jar nogui > /var/log/server.log 2> /var/log/server-err.log

  # Lambda
  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleArchitectures:
        - arm64
        - x86_64
      CompatibleRuntimes:
        - !FindInMap [Global, Lambda, Runtime]
      ContentUri: ./layer
      LayerName: !Sub ${AppName}-dependencies
      RetentionPolicy: Delete

  MinecraftLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - !FindInMap [Global, Lambda, Architecture]
      CodeUri: ./main
      Description: Manages the Minecraft server
      Environment:
        Variables:
          INSTANCE_ID: !Ref ServerHostInstance
          DOMAIN: !Ref DomainName
          PERIOD: 4
          DNS_FUNCTION: !Ref DNSLambda
          SNS_TOPIC: !Ref SNSAlertTopic
          POWERTOOLS_SERVICE_NAME: !Ref AppName
          POWERTOOLS_LOG_LEVEL: !FindInMap [Global, Lambda, LogLevel]
      FunctionName: !Ref AppName
      Handler: app.handler
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref MinecraftAPI
            Method: ANY
            Path: /{path+}
            PayloadFormatVersion: "2.0"
      Layers:
        - !Ref DependencyLayer
      MemorySize: 128
      Runtime: !FindInMap [Global, Lambda, Runtime]
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Tags:
        Owner: !Ref Owner
        Project: !Ref Project

  DNSLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - !FindInMap [Global, Lambda, Architecture]
      CodeUri: ./dns
      Description: Updates the Route53 record when server starts
      Environment:
        Variables:
          INSTANCE_ID: !Ref ServerHostInstance
          DOMAIN: !Ref DomainName
          HOSTED_ZONE_ID: !Ref HostedZone
          POWERTOOLS_SERVICE_NAME: !Sub ${AppName}-DNS-Manager
          POWERTOOLS_LOG_LEVEL: !FindInMap [Global, Lambda, LogLevel]
      FunctionName: !Sub ${AppName}-DNS-Manager
      Handler: app.handler
      Layers:
        - !Ref DependencyLayer
      MemorySize: 128
      Runtime: !FindInMap [Global, Lambda, Runtime]
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Tags:
        Owner: !Ref Owner
        Project: !Ref Project

  # API Gateway
  MinecraftAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: Triggers the Lambda that manages the Minecraft server
      Name: !Sub ${AppName}-API
      ProtocolType: HTTP
      Tags:
        Owner: !Ref Owner
        Project: !Ref Project

  MinecraftAPIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref MinecraftAPI
      AutoDeploy: true
      StageName: $default
      Tags:
        Owner: !Ref Owner
        Project: !Ref Project

  MinecraftAPIIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MinecraftAPI
      Description: Integrating the Minecraft API with the managing lambda
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ""
        - - "arn:"
          - !Ref AWS::Partition
          - ":apigateway:"
          - !Ref AWS::Region
          - ":lambda:path/2015-03-31/functions/"
          - !GetAtt MinecraftLambda.Arn
          - /invocations
      PayloadFormatVersion: "2.0"

  MinecraftAPIRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MinecraftAPI
      AuthorizationType: NONE
      RouteKey: ANY /{path+}
      Target: !Join
        - /
        - - integrations
          - !Ref MinecraftAPIIntegration

  # APIDomainName:
  #   Type: AWS::ApiGatewayV2::DomainName
  #   DependsOn: 
  #     - APIHTTPSCertificate
  #     - APILambdaTrigger
  #   Properties:
  #     DomainName: !Ref DomainName
  #     DomainNameConfigurations:
  #       - CertificateArn: !Ref APIHTTPSCertificate
  #         CertificateName: APICertificate

  # APIDomainNameMapping:
  #   Type: AWS::ApiGatewayV2::ApiMapping
  #   DependsOn: 
  #     - APIDomainName
  #     - APILambdaTriggerStage
  #   Properties:
  #     ApiId: !Ref APILambdaTrigger
  #     DomainName: !Ref APIDomainName
  #     Stage: !Ref APILambdaTriggerStage

  # SNS
  SNSAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${AppName}-SNS
      TopicName: !Sub ${AppName}-SNS

  SNSAlertTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref ContactEmail
      Protocol: email
      TopicArn: !Ref SNSAlertTopic

  # # Route 53
  # ServerRouteRecord:
  #   Type: AWS::Route53::RecordSet
  #   DependsOn: ServerHostInstance
  #   Properties:
  #     HostedZoneId: !If
  #       - HasCustomDomain
  #       - !Ref ServerHostedZone
  #       - !FindInMap [Route53, HostedZone, DefaultZone]
  #     Name: !Join
  #       - "."
  #       - - !Ref CustomSubdomain
  #         - !Ref DomainName
  #     ResourceRecords:
  #       - !GetAtt ServerHostInstance.PublicIp
  #     Type: A
  #     TTL: 300

  # APIRouteRecord:
  #   Type: AWS::Route53::RecordSet
  #   DependsOn: APIDomainName
  #   Properties:
  #     AliasTarget:
  #       DNSName: !GetAtt APIDomainName.RegionalDomainName
  #       HostedZoneId: !GetAtt APIDomainName.RegionalHostedZoneId
  #     HostedZoneId: !If
  #       - HasCustomDomain
  #       - !Ref ServerHostedZone
  #       - !FindInMap [Route53, HostedZone, DefaultZone]
  #     Name: !Join
  #       - "."
  #       - - api
  #         - !Ref CustomSubdomain
  #         - !Ref DomainName
  #     Type: A

  # EventBridge
  ServerStatusScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: Shuts down the server if it has been running for too long
      FlexibleTimeWindow:
        MaximumWindowInMinutes: 5
        Mode: "FLEXIBLE"
      Name: !Sub ${AppName}-server-monitor
      ScheduleExpression: rate(15 minutes)
      State: ENABLED
      Target:
        Arn: !GetAtt MinecraftLambda.Arn
        Input: | 
          {
            "version": "2.0",
            "routeKey": "ANY /{path+}",
            "rawPath": "/status",
            "rawQueryString": "expire=true",
            "headers": {
              "accept": "*/*",
              "accept-encoding": "gzip, deflate, br",
              "content-length": "0"
            },
            "queryStringParameters": {
              "expire": "true"
            },
            "requestContext": {
              "http": {
                "method": "GET",
                "path": "/status",
                "protocol": "HTTP/1.1"
              },
              "routeKey": "ANY /{path+}",
              "stage": "$default"
            },
            "pathParameters": {
              "path": "status"
            },
            "isBase64Encoded": false
          }
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
